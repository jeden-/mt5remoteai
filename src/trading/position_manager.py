"""
Modu≈Ç odpowiedzialny za zarzƒÖdzanie pozycjami tradingowymi.
"""
from datetime import datetime
from decimal import Decimal
from typing import List, Optional, Dict, Any, Union, Callable, AsyncGenerator
import asyncio
from dataclasses import asdict
from contextlib import asynccontextmanager
import time

from src.models.data_models import Position, SignalData
from src.utils.logger import TradingLogger
from src.models.enums import TradeType, PositionStatus, SignalAction

class PositionManager:
    """Klasa zarzƒÖdzajƒÖca pozycjami tradingowymi."""

    def __init__(
        self,
        symbol: str,
        max_position_size: Decimal = Decimal('1.0'),
        stop_loss_pips: Decimal = Decimal('50'),
        take_profit_pips: Decimal = Decimal('100'),
        trailing_stop_pips: Decimal = Decimal('30'),
        logger: Optional[TradingLogger] = None
    ) -> None:
        """
        Inicjalizacja managera pozycji.

        Args:
            symbol: Symbol instrumentu
            max_position_size: Maksymalny rozmiar pozycji
            stop_loss_pips: Domy≈õlny stop loss w pipsach
            take_profit_pips: Domy≈õlny take profit w pipsach
            trailing_stop_pips: Warto≈õƒá trailing stopu w pipsach
            logger: Logger do zapisywania operacji

        Raises:
            ValueError: Gdy kt√≥ry≈õ z parametr√≥w jest nieprawid≈Çowy
        """
        # Walidacja parametr√≥w
        if max_position_size <= Decimal('0'):
            raise ValueError("Nieprawid≈Çowy maksymalny rozmiar pozycji")
        if stop_loss_pips <= Decimal('0'):
            raise ValueError("Nieprawid≈Çowa warto≈õƒá stop loss")
        if take_profit_pips <= Decimal('0'):
            raise ValueError("Nieprawid≈Çowa warto≈õƒá take profit")
        if trailing_stop_pips <= Decimal('0'):
            raise ValueError("Nieprawid≈Çowa warto≈õƒá trailing stop")

        self.symbol = symbol
        self.max_position_size = max_position_size
        self.stop_loss_pips = stop_loss_pips
        self.take_profit_pips = take_profit_pips
        self.trailing_stop_pips = trailing_stop_pips
        self.logger = logger or TradingLogger(strategy_name="position_manager")
        self.open_positions: List[Position] = []
        self.closed_positions: List[Position] = []
        self._lock = asyncio.Lock()
        self._owner = None
        self._lock_count = 0
        self._positions: Dict[str, Position] = {}
        self.trailing_stop_pips = Decimal('10')  # 10 pips√≥w
        self.breakeven_pips = Decimal('10')  # 10 pips√≥w

    async def _ensure_lock(self, timeout: float = 1.0) -> asyncio.Lock:
        """
        Pr√≥buje uzyskaƒá blokadƒô z timeoutem.

        Args:
            timeout (float): Maksymalny czas oczekiwania na blokadƒô w sekundach

        Returns:
            asyncio.Lock: Obiekt blokady

        Raises:
            ValueError: Gdy timeout jest nieprawid≈Çowy
            TimeoutError: Gdy nie uda≈Ço siƒô uzyskaƒá blokady w zadanym czasie
        """
        if timeout <= 0:
            error_msg = f"Nieprawid≈Çowy timeout: {timeout}"
            if self.logger is not None:
                try:
                    await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignorujemy b≈Çƒôdy logowania
            raise ValueError(error_msg)

        try:
            current_task = asyncio.current_task()
            
            # Je≈õli bie≈ºƒÖce zadanie ju≈º posiada blokadƒô, zwiƒôksz licznik
            if self._owner == current_task:
                self._lock_count += 1
                if self.logger is not None:
                    try:
                        await self.logger.debug(f"üîí Zwiƒôkszono licznik blokady do {self._lock_count}")
                    except Exception:
                        pass  # Ignorujemy b≈Çƒôdy logowania
                return self._lock

            # Sprawd≈∫ czy blokada jest ju≈º zajƒôta
            if self._lock.locked():
                # Pr√≥ba uzyskania blokady z timeoutem
                try:
                    await asyncio.wait_for(self._lock.acquire(), timeout=timeout)
                except asyncio.TimeoutError:
                    error_msg = f"Timeout podczas oczekiwania na blokadƒô: {timeout}s"
                    if self.logger is not None:
                        try:
                            await self.logger.error(f"‚ùå {error_msg}")
                        except Exception:
                            pass  # Ignorujemy b≈Çƒôdy logowania
                    raise TimeoutError(error_msg)
            else:
                # Blokada jest wolna, spr√≥buj jƒÖ uzyskaƒá
                await self._lock.acquire()
            
            # Ustaw w≈Ça≈õciciela i licznik
            self._owner = current_task
            self._lock_count = 1
            if self.logger is not None:
                try:
                    await self.logger.debug("üîí Uzyskano nowƒÖ blokadƒô")
                except Exception:
                    pass  # Ignorujemy b≈Çƒôdy logowania
            
            return self._lock

        except asyncio.TimeoutError:
            error_msg = f"Timeout podczas oczekiwania na blokadƒô: {timeout}s"
            if self.logger is not None:
                try:
                    await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignorujemy b≈Çƒôdy logowania
            raise TimeoutError(error_msg)

    async def _release_lock(self) -> None:
        """
        Zwalnia blokadƒô.
        """
        try:
            # Najpierw sprawd≈∫ czy licznik jest ujemny
            if self._lock_count <= 0:
                try:
                    if self.logger:
                        await self.logger.error("‚ùå Licznik blokady jest ujemny lub 0 - resetujƒô do 0")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                self._lock_count = 0
                if self._owner == asyncio.current_task():
                    self._owner = None
                    if self._lock.locked():
                        self._lock.release()
                return

            if self._owner != asyncio.current_task():
                try:
                    if self.logger:
                        await self.logger.debug(f"üîì Pr√≥ba zwolnienia blokady przez niew≈Ça≈õciciela {asyncio.current_task()}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
            return
            
        self._lock_count -= 1
        
        if self._lock_count == 0:
            self._owner = None
            if self._lock.locked():
                self._lock.release()
                try:
                    if self.logger:
                        await self.logger.debug("üîì Blokada zwolniona")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
        except Exception as e:
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå B≈ÇƒÖd podczas zwalniania blokady: {str(e)}")
                    await self.logger.log_error(e)
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            # Resetuj stan w przypadku b≈Çƒôdu
            self._lock_count = 0
            self._owner = None
            if self._lock.locked():
                self._lock.release()

    @asynccontextmanager
    async def _lock_context(self, timeout: float = 1.0) -> AsyncGenerator[asyncio.Lock, None]:
        """
        Context manager do bezpiecznego zarzƒÖdzania blokadƒÖ.

        Args:
            timeout (float): Maksymalny czas oczekiwania na blokadƒô w sekundach

        Returns:
            AsyncGenerator[asyncio.Lock, None]: Generator zwracajƒÖcy obiekt blokady

        Raises:
            ValueError: Gdy timeout jest nieprawid≈Çowy
            TimeoutError: Gdy nie uda≈Ço siƒô uzyskaƒá blokady w zadanym czasie
        """
        try:
            lock = await self._ensure_lock(timeout)
            yield lock
        finally:
            await self._release_lock()

    async def open_position(self, signal: SignalData) -> Optional[Position]:
        """
        Otwiera nowƒÖ pozycjƒô na podstawie sygna≈Çu.

        Args:
            signal: Sygna≈Ç tradingowy

        Returns:
            Utworzona pozycja lub None w przypadku b≈Çƒôdu

        Raises:
            RuntimeError: Gdy wystƒÖpi b≈ÇƒÖd podczas otwierania pozycji
        """
        try:
            # Walidacja symbolu
        if signal.symbol != self.symbol:
                error_msg = f"Nieprawid≈Çowy symbol: {signal.symbol}, oczekiwano: {self.symbol}"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
            return None

            # Walidacja wolumenu
            if signal.volume <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowy wolumen: {signal.volume}"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
            return None

            # Sprawd≈∫ czy nie przekraczamy maksymalnego rozmiaru pozycji
            if not self.validate_position_size(signal.volume):
                error_msg = f"Przekroczono maksymalny rozmiar pozycji: {signal.volume}"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return None

            # Walidacja poziom√≥w
                if not await self.validate_position_levels(signal):
                    return None

            # Generuj unikalny identyfikator pozycji
            position_id = f"{signal.symbol}_{int(time.time() * 1000)}_{len(self._positions) + 1}"

                # Utw√≥rz nowƒÖ pozycjƒô
                position = Position(
                id=position_id,
                    timestamp=signal.timestamp,
                    symbol=signal.symbol,
                    trade_type=TradeType.BUY if signal.action == SignalAction.BUY else TradeType.SELL,
                    volume=signal.volume,
                entry_price=signal.entry_price,
                    stop_loss=signal.stop_loss,
                    take_profit=signal.take_profit,
                    status=PositionStatus.OPEN
                )
                
            # Dodaj pozycjƒô do s≈Çownika i listy otwartych pozycji
            self._positions[position.id] = position
                self.open_positions.append(position)
                
            try:
                if self.logger:
                    await self.logger.info(f"üîì Otwarto pozycjƒô {position.id}")
                await self.logger.log_trade(position, "OPEN")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
                
                return position

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas otwierania pozycji: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg)

    async def validate_position_levels(self, signal: SignalData) -> bool:
        """
        Sprawdza poprawno≈õƒá poziom√≥w dla nowej pozycji.

        Args:
            signal: Sygna≈Ç tradingowy

        Returns:
            True je≈õli poziomy sƒÖ prawid≈Çowe
        """
        try:
            if signal.action == SignalAction.BUY:
                if signal.stop_loss >= signal.entry_price:
                    try:
                        if self.logger:
                    await self.logger.error('‚ùå Stop loss dla pozycji BUY musi byƒá poni≈ºej ceny wej≈õcia')
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return False
                if signal.take_profit <= signal.entry_price:
                    try:
                        if self.logger:
                    await self.logger.error('‚ùå Take profit dla pozycji BUY musi byƒá powy≈ºej ceny wej≈õcia')
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return False
            else:  # SELL
                if signal.stop_loss <= signal.entry_price:
                    try:
                        if self.logger:
                    await self.logger.error('‚ùå Stop loss dla pozycji SELL musi byƒá powy≈ºej ceny wej≈õcia')
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return False
                if signal.take_profit >= signal.entry_price:
                    try:
                        if self.logger:
                    await self.logger.error('‚ùå Take profit dla pozycji SELL musi byƒá poni≈ºej ceny wej≈õcia')
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return False

            return True

        except Exception as e:
            try:
                if self.logger:
            await self.logger.error(f'‚ùå B≈ÇƒÖd podczas walidacji poziom√≥w: {str(e)}')
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            return False

    async def close_position(self, position: Position, exit_price: Optional[Decimal], volume: Optional[Decimal] = None) -> Optional[Position]:
        """
        Zamyka pozycjƒô lub jej czƒô≈õƒá.
        
        Args:
            position: Pozycja do zamkniƒôcia
            exit_price: Cena zamkniƒôcia
            volume: Opcjonalny wolumen do zamkniƒôcia (je≈õli None, zamyka ca≈ÇƒÖ pozycjƒô)
            
        Returns:
            Zamkniƒôta pozycja lub None w przypadku gdy pozycja nie istnieje w otwartych pozycjach
            
        Raises:
            RuntimeError: Gdy parametry sƒÖ nieprawid≈Çowe (None position, nieprawid≈Çowy wolumen/cena)
        """
        # Walidacja pozycji przed blokiem try
            if position is None:
                error_msg = "Brak pozycji do zamkniƒôcia"
            try:
                if self.logger:
                await self.logger.error(f"‚ùå {error_msg}")
                await self.logger.log_error(RuntimeError(error_msg))
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

        try:
            # Walidacja pozycji
            if position.entry_price is None:
                error_msg = f"Pozycja {position.id} ma nieprawid≈ÇowƒÖ cenƒô wej≈õcia: None"
                try:
                    if self.logger:
                await self.logger.error(f"‚ùå {error_msg}")
                await self.logger.log_error(RuntimeError(error_msg))
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            # Walidacja ceny zamkniƒôcia
            if exit_price is None:
                error_msg = "Nieprawid≈Çowa cena zamkniƒôcia: None"
                try:
                    if self.logger:
                await self.logger.error(f"‚ùå {error_msg}")
                await self.logger.log_error(RuntimeError(error_msg))
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            if exit_price <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowa cena zamkniƒôcia: {exit_price}"
                try:
                    if self.logger:
                await self.logger.error(f"‚ùå {error_msg}")
                await self.logger.log_error(RuntimeError(error_msg))
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            async with self._lock_context():
                try:
                    if self.logger:
                await self.logger.info(f"üîÑ Zamykam pozycjƒô {position.id} ({position.trade_type.name})")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania

                # Sprawd≈∫ czy pozycja jest otwarta
                if position.id not in [p.id for p in self.open_positions]:
                    error_msg = f"Pozycja {position.id} nie jest otwarta"
                    try:
                        if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
                            await self.logger.log_error(RuntimeError(error_msg))
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return None

                # Walidacja wolumenu
                if volume is not None:
                    if volume <= Decimal('0'):
                        error_msg = f"Nieprawid≈Çowy wolumen: {volume}"
                        try:
                            if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                        await self.logger.log_error(RuntimeError(error_msg))
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania
                        raise RuntimeError(error_msg)

                    if volume > position.volume:
                        error_msg = f"Wolumen {volume} wiƒôkszy ni≈º pozycja {position.volume}"
                        try:
                            if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                        await self.logger.log_error(RuntimeError(error_msg))
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania
                        raise RuntimeError(error_msg)

                    close_volume = volume
                    position.volume -= volume
                else:
                    close_volume = position.volume

                try:
                    profit = self.calculate_position_profit(position, exit_price)
                    pips = self.calculate_position_pips(position, exit_price)
                except Exception as e:
                    error_msg = f"B≈ÇƒÖd podczas obliczania profitu: {str(e)}"
                    try:
                        if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
                    await self.logger.log_error(RuntimeError(error_msg))
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    raise RuntimeError(error_msg)

                # Utw√≥rz zamkniƒôtƒÖ pozycjƒô
                closed_position = Position(
                    id=position.id,
                    timestamp=position.timestamp,
                    symbol=position.symbol,
                    trade_type=position.trade_type,
                    entry_price=position.entry_price,
                    volume=close_volume,
                    stop_loss=position.stop_loss,
                    take_profit=position.take_profit,
                    status=PositionStatus.CLOSED,
                    exit_price=exit_price,
                    profit=profit,
                    pips=pips
                )
                
                # Dodaj do zamkniƒôtych pozycji
                self.closed_positions.append(closed_position)

                # Usu≈Ñ pozycjƒô z otwartych pozycji tylko je≈õli zamykamy ca≈Çy wolumen
                if volume is None or position.volume <= Decimal('0'):
                    try:
                        # Usu≈Ñ z listy otwartych pozycji
                        self.open_positions = [p for p in self.open_positions if p.id != position.id]
                        # Usu≈Ñ ze s≈Çownika _positions
                        if position.id in self._positions:
                            del self._positions[position.id]
                    except Exception as e:
                        error_msg = f"B≈ÇƒÖd podczas usuwania pozycji {position.id}: {str(e)}"
                        try:
                            if self.logger:
                                await self.logger.error(f"‚ùå {error_msg}")
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania
                        return None

                # Zaloguj zamkniƒôcie
                try:
                    if self.logger:
                await self.logger.log_trade(closed_position, "CLOSE")
                await self.logger.info(f"‚úÖ Zamkniƒôto pozycjƒô {position.id}: wolumen={close_volume}, profit={profit:.2f}, pips={pips:.1f}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania

                return closed_position

        except Exception as e:
            try:
                if position and self.logger:
                await self.logger.error(f"‚ùå B≈ÇƒÖd podczas zamykania pozycji {position.id}: {str(e)}")
                await self.logger.log_error(e)
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            if isinstance(e, RuntimeError):
                raise
            return None

    def validate_position_size(self, volume: Decimal) -> bool:
        """
        Sprawdza czy rozmiar pozycji nie przekracza maksimum.

        Args:
            volume: Wielko≈õƒá pozycji do sprawdzenia

        Returns:
            True je≈õli rozmiar jest prawid≈Çowy
        """
        if volume <= Decimal('0'):
            return False
            
        current_volume = sum(p.volume for p in self.open_positions)
        return (current_volume + volume) <= self.max_position_size

    def check_stop_loss(self, position: Position, current_price: Decimal) -> bool:
        """
        Sprawdza czy pozycja powinna zostaƒá zamkniƒôta przez stop loss.

        Args:
            position (Position): Pozycja do sprawdzenia
            current_price (Decimal): Aktualna cena

        Returns:
            bool: True je≈õli pozycja powinna zostaƒá zamkniƒôta
            
        Raises:
            RuntimeError: Gdy cena jest nieprawid≈Çowa
        """
        if current_price <= Decimal('0'):
            error_msg = f"‚ùå Nieprawid≈Çowa cena: {current_price}"
            self.logger.error(error_msg)
            raise RuntimeError(error_msg)
            
        try:
            if position.trade_type == TradeType.BUY:
                return current_price <= position.stop_loss
            else:  # SELL
                return current_price >= position.stop_loss
        except Exception as e:
            error_msg = f"‚ùå B≈ÇƒÖd podczas sprawdzania stop loss dla {position.id}: {str(e)}"
            self.logger.error(error_msg)
            raise RuntimeError(error_msg) from e

    def check_take_profit(self, position: Position, current_price: Decimal) -> bool:
        """
        Sprawdza czy pozycja powinna zostaƒá zamkniƒôta przez take profit.

        Args:
            position (Position): Pozycja do sprawdzenia
            current_price (Decimal): Aktualna cena

        Returns:
            bool: True je≈õli pozycja powinna zostaƒá zamkniƒôta
            
        Raises:
            RuntimeError: Gdy cena jest nieprawid≈Çowa
        """
        if current_price <= Decimal('0'):
            error_msg = f"‚ùå Nieprawid≈Çowa cena: {current_price}"
            self.logger.error(error_msg)
            raise RuntimeError(error_msg)
            
        try:
            if position.trade_type == TradeType.BUY:
                return current_price >= position.take_profit
            else:  # SELL
                return current_price <= position.take_profit
        except Exception as e:
            error_msg = f"‚ùå B≈ÇƒÖd podczas sprawdzania take profit dla {position.id}: {str(e)}"
            self.logger.error(error_msg)
            raise RuntimeError(error_msg) from e

    async def process_price_update(self, current_price: Optional[Decimal]) -> None:
        """
        Przetwarza aktualizacjƒô ceny dla wszystkich otwartych pozycji.
        
        Args:
            current_price: Aktualna cena

        Raises:
            ValueError: Gdy cena jest None lub nieprawid≈Çowa
            RuntimeError: Gdy wystƒÖpi b≈ÇƒÖd podczas przetwarzania
        """
        if current_price is None:
            error_msg = "Nieprawid≈Çowa cena: None"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise ValueError(error_msg)

        if current_price <= Decimal('0'):
            error_msg = f"Nieprawid≈Çowa cena: {current_price}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise ValueError(error_msg)

        try:
            async with self._lock_context():
                # Kopiujemy listƒô pozycji, ≈ºeby uniknƒÖƒá modyfikacji podczas iteracji
                positions = self.open_positions.copy()
                
                for position in positions:
                    try:
                        # Sprawd≈∫ czy pozycja ma wszystkie wymagane pola
                        if position.stop_loss is None or position.take_profit is None:
                            error_msg = f"Pozycja {position.id} ma nieprawid≈Çowe poziomy: SL={position.stop_loss}, TP={position.take_profit}"
                            try:
                                if self.logger:
                                    await self.logger.error(f"‚ùå {error_msg}")
                            except Exception:
                                pass  # Ignoruj b≈Çƒôdy logowania
                            raise RuntimeError(error_msg)

                        # Sprawd≈∫ stop loss
                        if self.check_stop_loss(position, current_price):
                            try:
                                if self.logger:
                                    await self.logger.info(f"üõë Stop Loss dla {position.id} na poziomie {position.stop_loss}")
                            except Exception:
                                pass  # Ignoruj b≈Çƒôdy logowania
                            await self.close_position(position, position.stop_loss)  # Zamykamy po cenie SL
                            continue

                        # Sprawd≈∫ take profit
                        if self.check_take_profit(position, current_price):
                            try:
                                if self.logger:
                                    await self.logger.info(f"üéØ Take Profit dla {position.id} na poziomie {position.take_profit}")
                            except Exception:
                                pass  # Ignoruj b≈Çƒôdy logowania
                            await self.close_position(position, position.take_profit)  # Zamykamy po cenie TP
                            continue

                        # Aktualizuj trailing stop
                        try:
                    await self.update_trailing_stop(position, current_price)
                        except Exception as e:
                            try:
                                if self.logger:
                                    await self.logger.error(f"‚ùå B≈ÇƒÖd podczas aktualizacji trailing stop dla {position.id}: {str(e)}")
                            except Exception:
                                pass  # Ignoruj b≈Çƒôdy logowania

                        # Aktualizuj breakeven
                        try:
                            await self.update_breakeven(position, current_price)
                        except Exception as e:
                            try:
                                if self.logger:
                                    await self.logger.error(f"‚ùå B≈ÇƒÖd podczas aktualizacji breakeven dla {position.id}: {str(e)}")
                            except Exception:
                                pass  # Ignoruj b≈Çƒôdy logowania

                    except Exception as e:
                        error_msg = f"B≈ÇƒÖd podczas przetwarzania pozycji {position.id}: {str(e)}"
                        try:
                            if self.logger:
                                await self.logger.error(f"‚ùå {error_msg}")
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania
                        raise RuntimeError(error_msg)

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas przetwarzania ceny: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg)

    async def process_price_updates(self, prices: List[Optional[Decimal]]) -> List[Position]:
        """
        Przetwarza listƒô aktualizacji cen.
        
        Args:
            prices: Lista cen do przetworzenia
            
        Returns:
            Lista zamkniƒôtych pozycji
            
        Raises:
            ValueError: Gdy lista jest pusta lub zawiera nieprawid≈Çowe warto≈õci
            RuntimeError: Gdy wystƒÖpi b≈ÇƒÖd podczas przetwarzania
        """
        if not prices:
            try:
                if self.logger:
                    await self.logger.warning("‚ö†Ô∏è Otrzymano pustƒÖ listƒô cen")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            return []
            
        closed_positions = []
        try:
        for price in prices:
            if price is None:
                    error_msg = "Nieprawid≈Çowa cena: None"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    raise ValueError(error_msg)

                # Zapisz stan pozycji przed aktualizacjƒÖ
                positions_before = set(p.id for p in self.open_positions)
                
                await self.process_price_update(price)
                
                # Sprawd≈∫ kt√≥re pozycje zosta≈Çy zamkniƒôte
                positions_after = set(p.id for p in self.open_positions)
                closed_position_ids = positions_before - positions_after
                
                # Dodaj zamkniƒôte pozycje do listy
                closed_positions.extend([p for p in self.closed_positions if p.id in closed_position_ids])

                return closed_positions

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas przetwarzania cen: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise ValueError(error_msg)  # Zmieniamy na ValueError dla sp√≥jno≈õci z testami

    def calculate_position_profit(self, position: Position, exit_price: Decimal) -> Decimal:
        """Oblicza zysk/stratƒô dla pozycji."""
        pip_value = Decimal('0.0001')  # Warto≈õƒá 1 pipsa dla par EURUSD
        multiplier = Decimal('100000')  # Mno≈ºnik dla par walutowych

        if position.trade_type == TradeType.BUY:
            price_diff = exit_price - position.entry_price
        else:  # SELL
            price_diff = position.entry_price - exit_price

        # Oblicz zysk/stratƒô w walucie bazowej
        profit = (price_diff * multiplier * position.volume).quantize(Decimal('0.00001'))

        return profit

    def calculate_position_pips(self, position: Position, exit_price: Decimal) -> Decimal:
        """Oblicza ilo≈õƒá pips√≥w zysku/straty dla pozycji."""
        pip_value = Decimal('0.0001')  # Warto≈õƒá 1 pipsa dla par EURUSD

        if position.trade_type == TradeType.BUY:
            pips = ((exit_price - position.entry_price) / pip_value).quantize(Decimal('0.1'))
        else:  # SELL
            pips = ((position.entry_price - exit_price) / pip_value).quantize(Decimal('0.1'))

        return pips

    def get_position_summary(self, position: Position) -> Dict[str, Any]:
        """
        Generuje podsumowanie pozycji w formie s≈Çownika.

        Args:
            position: Pozycja do podsumowania

        Returns:
            S≈Çownik z danymi pozycji
        """
        summary = {
            'timestamp': position.timestamp,
            'symbol': position.symbol,
            'trade_type': position.trade_type.value,
            'entry_price': float(position.entry_price),
            'volume': float(position.volume),
            'stop_loss': float(position.stop_loss),
            'take_profit': float(position.take_profit),
            'status': position.status.value
        }
        
        if position.exit_price is not None:
            summary['exit_price'] = float(position.exit_price)
        if position.profit is not None:
            summary['profit'] = float(position.profit)
        if position.pips is not None:
            summary['pips'] = float(position.pips)
            
        return summary

    def calculate_risk_metrics(self, position: Position) -> Dict[str, Decimal]:
        """
        Oblicza metryki ryzyka dla pozycji.

        Args:
            position (Position): Pozycja do analizy

        Returns:
            Dict[str, Decimal]: S≈Çownik z metrykami ryzyka

        Raises:
            ValueError: Gdy pozycja jest nieprawid≈Çowa
            RuntimeError: Gdy wystƒÖpi b≈ÇƒÖd podczas obliczania metryk
        """
        try:
            # Sprawd≈∫ czy pozycja ma wszystkie wymagane pola
            if not all([position.entry_price, position.stop_loss, position.take_profit, position.volume]):
                error_msg = f"‚ùå Brak wymaganych p√≥l w pozycji {position.id}"
                raise ValueError(error_msg)

            # Sprawd≈∫ poprawno≈õƒá poziom√≥w SL/TP
            if position.trade_type == TradeType.BUY:
                if position.stop_loss > position.entry_price:  # Zmieniono z >= na >
                    error_msg = "Stop loss dla pozycji d≈Çugiej musi byƒá poni≈ºej ceny wej≈õcia"
                    raise ValueError(error_msg)
                if position.take_profit <= position.entry_price:
                    error_msg = "Take profit dla pozycji d≈Çugiej musi byƒá powy≈ºej ceny wej≈õcia"
                    raise ValueError(error_msg)
            else:  # SELL
                if position.stop_loss <= position.entry_price:
                    error_msg = "Stop loss dla pozycji kr√≥tkiej musi byƒá powy≈ºej ceny wej≈õcia"
                    raise ValueError(error_msg)
                if position.take_profit >= position.entry_price:
                    error_msg = "Take profit dla pozycji kr√≥tkiej musi byƒá poni≈ºej ceny wej≈õcia"
                    raise ValueError(error_msg)

            # Oblicz podstawowe warto≈õci
            pip_value = Decimal('0.0001')
            risk_pips = abs(position.entry_price - position.stop_loss) / pip_value
            reward_pips = abs(position.take_profit - position.entry_price) / pip_value

            # Oblicz warto≈õci w walucie
            risk_amount = risk_pips * pip_value * position.volume * Decimal('100000')
            reward_amount = reward_pips * pip_value * position.volume * Decimal('100000')

            # Oblicz metryki
            risk_reward_ratio = reward_pips / risk_pips if risk_pips > 0 else Decimal('0')
            risk_per_trade = risk_amount
            position_exposure = position.volume
            max_drawdown = risk_amount

            return {
                'risk_reward_ratio': risk_reward_ratio,
                'risk_per_trade': risk_per_trade,
                'position_exposure': position_exposure,
                'max_drawdown': max_drawdown,
                'risk_pips': risk_pips,
                'reward_pips': reward_pips,
                'risk_amount': risk_amount,
                'reward_amount': reward_amount
            }

        except Exception as e:
            error_msg = f"‚ùå B≈ÇƒÖd podczas obliczania metryk ryzyka: {str(e)}"
            raise RuntimeError(error_msg) from e

    async def modify_position_levels(self, position: Position, new_stop_loss: Optional[Decimal], new_take_profit: Optional[Decimal]) -> bool:
        """
        Modyfikuje poziomy stop loss i take profit dla pozycji.

        Args:
            position: Pozycja do modyfikacji
            new_stop_loss: Nowy poziom stop loss (None oznacza brak zmiany)
            new_take_profit: Nowy poziom take profit (None oznacza brak zmiany)

        Returns:
            bool: True je≈õli modyfikacja siƒô powiod≈Ça, False w przeciwnym razie
        """
        # Sprawd≈∫ czy pozycja nie jest None
        if position is None:
            try:
                if self.logger:
                    await self.logger.error("‚ùå Pozycja nie mo≈ºe byƒá None")
            except Exception:
                pass
            return False

        try:
            # Sprawd≈∫ czy pozycja istnieje
            if position.id not in self._positions:
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå Pozycja {position.id} nie istnieje")
                except Exception:
                    pass
                return False

            # Sprawd≈∫ czy pozycja jest otwarta
        if position.status != PositionStatus.OPEN:
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå Pozycja {position.id} nie jest otwarta")
                except Exception:
                    pass
            return False

            # Obs≈Çuga stop loss
            if new_stop_loss is None:
                if position.stop_loss is None:
                    try:
                        if self.logger:
                            await self.logger.error("‚ùå Brak aktualnego stop loss")
                    except Exception:
                        pass
                    return False
                new_stop_loss = position.stop_loss
            elif new_stop_loss <= Decimal('0'):
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå Nieprawid≈Çowy stop loss: {new_stop_loss}")
                except Exception:
                    pass
                return False

            # Obs≈Çuga take profit
            if new_take_profit is None:
                if position.take_profit is None:
                    try:
                        if self.logger:
                            await self.logger.error("‚ùå Brak aktualnego take profit")
                    except Exception:
                        pass
                    return False
                new_take_profit = position.take_profit
            elif new_take_profit <= Decimal('0'):
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå Nieprawid≈Çowy take profit: {new_take_profit}")
                except Exception:
                    pass
            return False

        # Walidacja poziom√≥w dla pozycji BUY
        if position.trade_type == TradeType.BUY:
                if new_stop_loss >= position.entry_price or new_take_profit <= position.entry_price:
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå Nieprawid≈Çowe poziomy dla pozycji BUY: SL={new_stop_loss}, TP={new_take_profit}")
                    except Exception:
                        pass
                return False
        # Walidacja poziom√≥w dla pozycji SELL
        else:
                if new_stop_loss <= position.entry_price or new_take_profit >= position.entry_price:
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå Nieprawid≈Çowe poziomy dla pozycji SELL: SL={new_stop_loss}, TP={new_take_profit}")
                    except Exception:
                        pass
                return False

            # Aktualizacja poziom√≥w
            position.stop_loss = new_stop_loss
            position.take_profit = new_take_profit

            try:
                if self.logger:
                    await self.logger.info(f"‚úÖ Zmodyfikowano poziomy dla {position.id}: SL={new_stop_loss}, TP={new_take_profit}")
                    await self.logger.log_trade(position, "MODIFY")
            except Exception:
                pass
        
        return True

        except Exception as e:
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå B≈ÇƒÖd podczas modyfikacji poziom√≥w: {str(e)}")
            except Exception:
                pass
            return False

    async def update_trailing_stop(self, position: Position, current_price: Decimal) -> None:
        """
        Aktualizuje trailing stop dla pozycji.

        Args:
            position: Pozycja do aktualizacji
            current_price: Aktualna cena
            
        Raises:
            RuntimeError: Gdy parametry sƒÖ nieprawid≈Çowe (None position, nieprawid≈Çowa cena)
        """
        try:
            # Sprawd≈∫ wymagane pola
            if position.entry_price is None:
                error_msg = "Brak ceny wej≈õcia w pozycji"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            if position.stop_loss is None:
                error_msg = "Brak stop loss w pozycji"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            if current_price <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowa cena: {current_price}"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            # Oblicz minimalny dystans dla trailing stop
            min_distance = Decimal('0.0010')  # 10 pips√≥w

            if position.trade_type == TradeType.BUY:
                # Dla pozycji d≈Çugiej, przesu≈Ñ SL w g√≥rƒô je≈õli cena wzros≈Ça
                if current_price > position.stop_loss + min_distance:
                    new_stop_loss = current_price - min_distance
                if new_stop_loss > position.stop_loss:
                    position.stop_loss = new_stop_loss
                        try:
                            if self.logger:
                    await self.logger.info(f"üîÑ Przesuniƒôto trailing stop dla {position.id} na {new_stop_loss}")
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania

            elif position.trade_type == TradeType.SELL:
                # Dla pozycji kr√≥tkiej, przesu≈Ñ SL w d√≥≈Ç je≈õli cena spad≈Ça
                if current_price < position.stop_loss - min_distance:
                    new_stop_loss = current_price + min_distance
                if new_stop_loss < position.stop_loss:
                    position.stop_loss = new_stop_loss
                        try:
                            if self.logger:
                    await self.logger.info(f"üîÑ Przesuniƒôto trailing stop dla {position.id} na {new_stop_loss}")
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas aktualizacji trailing stop: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg)

    async def update_breakeven(self, position: Position, current_price: Decimal) -> None:
        """
        Przesuwa stop loss na poziom wej≈õcia (breakeven).

        Args:
            position: Pozycja do aktualizacji
            current_price: Aktualna cena

        Raises:
            RuntimeError: Gdy wystƒÖpi b≈ÇƒÖd podczas aktualizacji breakeven
        """
        try:
            # Sprawd≈∫ wymagane pola
            if position.entry_price is None:
                error_msg = "Brak ceny wej≈õcia w pozycji"
                try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            if position.stop_loss is None:
                error_msg = "Brak stop loss w pozycji"
                try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            if current_price <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowa cena: {current_price}"
                try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            # Oblicz minimalny dystans dla breakeven
            min_distance = Decimal('0.0010')  # 10 pips√≥w

            if position.trade_type == TradeType.BUY:
                # Dla pozycji d≈Çugiej, sprawd≈∫ czy cena jest wystarczajƒÖco wysoko
                if current_price > position.entry_price + min_distance:
                    position.stop_loss = position.entry_price
                    try:
                    if self.logger:
                        await self.logger.info(f"üéØ Przesuniƒôto SL na breakeven dla {position.id}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania

            elif position.trade_type == TradeType.SELL:
                # Dla pozycji kr√≥tkiej, sprawd≈∫ czy cena jest wystarczajƒÖco nisko
                if current_price < position.entry_price - min_distance:
                    position.stop_loss = position.entry_price
                    try:
                    if self.logger:
                        await self.logger.info(f"üéØ Przesuniƒôto SL na breakeven dla {position.id}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas aktualizacji breakeven: {str(e)}"
            try:
            if self.logger:
                await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg)