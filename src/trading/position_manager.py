"""
Modu≈Ç odpowiedzialny za zarzƒÖdzanie pozycjami tradingowymi.
"""
from datetime import datetime
from decimal import Decimal
from typing import List, Optional, Dict, Any, Union, Callable, AsyncGenerator
import asyncio
from dataclasses import asdict
from contextlib import asynccontextmanager
import time

from src.models.data_models import Position, SignalData
from src.utils.logger import TradingLogger
from src.models.enums import TradeType, PositionStatus, SignalAction

class PositionManager:
    """Klasa zarzƒÖdzajƒÖca pozycjami tradingowymi."""

    def __init__(
        self,
        symbol: str,
        max_position_size: Decimal = Decimal('1.0'),
        stop_loss_pips: Decimal = Decimal('50'),
        take_profit_pips: Decimal = Decimal('100'),
        trailing_stop_pips: Decimal = Decimal('30'),
        logger: Optional[TradingLogger] = None
    ) -> None:
        """
        Inicjalizacja managera pozycji.

        Args:
            symbol: Symbol instrumentu
            max_position_size: Maksymalny rozmiar pozycji
            stop_loss_pips: Domy≈õlny stop loss w pipsach
            take_profit_pips: Domy≈õlny take profit w pipsach
            trailing_stop_pips: Warto≈õƒá trailing stopu w pipsach
            logger: Logger do zapisywania operacji

        Raises:
            ValueError: Gdy kt√≥ry≈õ z parametr√≥w jest nieprawid≈Çowy
        """
        # Walidacja parametr√≥w
        if max_position_size <= Decimal('0'):
            raise ValueError("Nieprawid≈Çowy maksymalny rozmiar pozycji")
        if stop_loss_pips <= Decimal('0'):
            raise ValueError("Nieprawid≈Çowa warto≈õƒá stop loss")
        if take_profit_pips <= Decimal('0'):
            raise ValueError("Nieprawid≈Çowa warto≈õƒá take profit")
        if trailing_stop_pips <= Decimal('0'):
            raise ValueError("Nieprawid≈Çowa warto≈õƒá trailing stop")

        self.symbol = symbol
        self.max_position_size = max_position_size
        self.stop_loss_pips = stop_loss_pips
        self.take_profit_pips = take_profit_pips
        self.trailing_stop_pips = trailing_stop_pips
        self.logger = logger or TradingLogger(strategy_name="position_manager")
        self.open_positions: List[Position] = []
        self.closed_positions: List[Position] = []
        self._lock = asyncio.Lock()
        self._owner = None
        self._lock_count = 0
        self._positions: Dict[str, Position] = {}
        self.trailing_stop_pips = Decimal('10')  # 10 pips√≥w
        self.breakeven_pips = Decimal('10')  # 10 pips√≥w

    async def _ensure_lock(self, timeout: float = 1.0) -> asyncio.Lock:
        """
        Pr√≥buje uzyskaƒá blokadƒô z timeoutem.

        Args:
            timeout (float): Maksymalny czas oczekiwania na blokadƒô w sekundach

        Returns:
            asyncio.Lock: Obiekt blokady

        Raises:
            ValueError: Gdy timeout jest nieprawid≈Çowy
            TimeoutError: Gdy nie uda≈Ço siƒô uzyskaƒá blokady w zadanym czasie
        """
        if timeout <= 0:
            error_msg = f"Nieprawid≈Çowy timeout: {timeout}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise ValueError(error_msg)

        try:
            current_task = asyncio.current_task()
            
            # Je≈õli bie≈ºƒÖce zadanie ju≈º posiada blokadƒô, zwiƒôksz licznik
            if self._owner == current_task:
                self._lock_count += 1
                try:
                    if self.logger:
                        await self.logger.debug(f"üîí Zwiƒôkszono licznik blokady do {self._lock_count}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return self._lock

            # Sprawd≈∫ czy blokada jest ju≈º zajƒôta
            if self._lock.locked():
                # Pr√≥ba uzyskania blokady z timeoutem
                try:
                    await asyncio.wait_for(self._lock.acquire(), timeout=timeout)
                except asyncio.TimeoutError:
                    error_msg = f"Timeout podczas oczekiwania na blokadƒô: {timeout}s"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    raise TimeoutError(error_msg)
            else:
                # Blokada jest wolna, spr√≥buj jƒÖ uzyskaƒá
                await self._lock.acquire()
            
            # Ustaw w≈Ça≈õciciela i licznik
            self._owner = current_task
            self._lock_count = 1
            try:
                if self.logger:
                    await self.logger.debug("üîí Uzyskano nowƒÖ blokadƒô")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            
            return self._lock

        except TimeoutError as e:
            raise  # Przeka≈º dalej wyjƒÖtek TimeoutError
        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas uzyskiwania blokady: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg) from e

    async def _release_lock(self) -> None:
        """
        Zwalnia blokadƒô.
        """
        try:
            # Najpierw sprawd≈∫ czy licznik jest ujemny
            if self._lock_count <= 0:
                try:
                    if self.logger:
                        await self.logger.error("‚ùå Licznik blokady jest ujemny lub 0 - resetujƒô do 0")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                self._lock_count = 0
                if self._owner == asyncio.current_task():
                    self._owner = None
                    if self._lock.locked():
                        self._lock.release()
                return

            if self._owner != asyncio.current_task():
                try:
                    if self.logger:
                        await self.logger.debug(f"üîì Pr√≥ba zwolnienia blokady przez niew≈Ça≈õciciela {asyncio.current_task()}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return
            
            self._lock_count -= 1
            
            if self._lock_count == 0:
                self._owner = None
                if self._lock.locked():
                    self._lock.release()
                    try:
                        if self.logger:
                            await self.logger.debug("üîì Blokada zwolniona")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania

        except Exception as e:
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå B≈ÇƒÖd podczas zwalniania blokady: {str(e)}")
                    await self.logger.log_error(e)
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            # Resetuj stan w przypadku b≈Çƒôdu
            self._lock_count = 0
            self._owner = None
            if self._lock.locked():
                self._lock.release()

    @asynccontextmanager
    async def _lock_context(self, timeout: float = 1.0) -> AsyncGenerator[asyncio.Lock, None]:
        """
        Context manager do bezpiecznego zarzƒÖdzania blokadƒÖ.

        Args:
            timeout (float): Maksymalny czas oczekiwania na blokadƒô w sekundach

        Returns:
            AsyncGenerator[asyncio.Lock, None]: Generator zwracajƒÖcy obiekt blokady

        Raises:
            ValueError: Gdy timeout jest nieprawid≈Çowy
            TimeoutError: Gdy nie uda≈Ço siƒô uzyskaƒá blokady w zadanym czasie
        """
        try:
            lock = await self._ensure_lock(timeout)
            yield lock
        finally:
            await self._release_lock()

    async def open_position(self, signal: SignalData) -> Optional[Position]:
        """
        Otwiera nowƒÖ pozycjƒô na podstawie sygna≈Çu.

        Args:
            signal: Sygna≈Ç tradingowy

        Returns:
            Utworzona pozycja lub None w przypadku b≈Çƒôdu

        Raises:
            RuntimeError: Gdy wystƒÖpi b≈ÇƒÖd podczas otwierania pozycji
        """
        try:
            # Walidacja symbolu
            if signal.symbol != self.symbol:
                error_msg = f"Nieprawid≈Çowy symbol: {signal.symbol}, oczekiwano: {self.symbol}"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return None

            # Walidacja wolumenu
            if signal.volume <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowy wolumen: {signal.volume}"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return None

            # Sprawd≈∫ czy nie przekraczamy maksymalnego rozmiaru pozycji
            if not self.validate_position_size(signal.volume):
                return None

            # Walidacja poziom√≥w
            if not await self.validate_position_levels(signal):
                return None

            # Generuj unikalny identyfikator pozycji
            position_id = f"{signal.symbol}_{int(time.time() * 1000)}_{len(self._positions) + 1}"

            # Utw√≥rz nowƒÖ pozycjƒô
            position = Position(
                id=position_id,
                timestamp=signal.timestamp,
                symbol=signal.symbol,
                trade_type=TradeType.BUY if signal.action == SignalAction.BUY else TradeType.SELL,
                volume=signal.volume,
                entry_price=signal.entry_price,
                stop_loss=signal.stop_loss,
                take_profit=signal.take_profit,
                status=PositionStatus.OPEN
            )
            
            # Dodaj pozycjƒô do s≈Çownika i listy otwartych pozycji
            self._positions[position.id] = position
            self.open_positions.append(position)
            
            try:
                if self.logger:
                    await self.logger.info(f"üîì Otwarto pozycjƒô {position.id}")
                await self.logger.log_trade(position, "OPEN")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            
            return position

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas otwierania pozycji: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg)

    async def validate_position_levels(self, signal: SignalData) -> bool:
        """
        Sprawdza poprawno≈õƒá poziom√≥w stop loss i take profit dla sygna≈Çu.

        Args:
            signal: Sygna≈Ç do sprawdzenia

        Returns:
            bool: True je≈õli poziomy sƒÖ prawid≈Çowe, False w przeciwnym razie
        """
        try:
            if signal.stop_loss is None or signal.take_profit is None:
                error_msg = "Brak wymaganych poziom√≥w SL/TP"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return False

            if signal.stop_loss <= Decimal('0') or signal.take_profit <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowe poziomy: SL={signal.stop_loss}, TP={signal.take_profit}"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return False

            # Sprawd≈∫ logikƒô poziom√≥w dla pozycji BUY
            if signal.action == SignalAction.BUY:
                if signal.stop_loss >= signal.entry_price:
                    error_msg = "Stop loss dla pozycji long musi byƒá poni≈ºej ceny wej≈õcia"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return False

                if signal.take_profit <= signal.entry_price:
                    error_msg = "Take profit dla pozycji long musi byƒá powy≈ºej ceny wej≈õcia"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return False

            # Sprawd≈∫ logikƒô poziom√≥w dla pozycji SELL
            else:
                if signal.stop_loss <= signal.entry_price:
                    error_msg = "Stop loss dla pozycji short musi byƒá powy≈ºej ceny wej≈õcia"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return False

                if signal.take_profit >= signal.entry_price:
                    error_msg = "Take profit dla pozycji short musi byƒá poni≈ºej ceny wej≈õcia"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return False

            return True

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas walidacji poziom√≥w: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            return False

    async def close_position(self, position: Position, exit_price: Optional[Decimal], volume: Optional[Decimal] = None) -> Optional[Position]:
        """
        Zamyka pozycjƒô lub jej czƒô≈õƒá.
        
        Args:
            position: Pozycja do zamkniƒôcia
            exit_price: Cena zamkniƒôcia
            volume: Opcjonalny wolumen do zamkniƒôcia (je≈õli None, zamyka ca≈ÇƒÖ pozycjƒô)
            
        Returns:
            Zamkniƒôta pozycja lub None w przypadku gdy pozycja nie istnieje w otwartych pozycjach
            
        Raises:
            RuntimeError: Gdy parametry sƒÖ nieprawid≈Çowe (None position, nieprawid≈Çowy wolumen/cena)
        """
        # Walidacja pozycji przed blokiem try
        if position is None:
            error_msg = "Brak pozycji do zamkniƒôcia"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
                    await self.logger.log_error(RuntimeError(error_msg))
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg)

        try:
            # Walidacja pozycji
            if position.entry_price is None:
                error_msg = f"Pozycja {position.id} ma nieprawid≈ÇowƒÖ cenƒô wej≈õcia: None"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                        await self.logger.log_error(RuntimeError(error_msg))
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            # Walidacja ceny zamkniƒôcia
            if exit_price is None:
                error_msg = "Nieprawid≈Çowa cena zamkniƒôcia: None"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                        await self.logger.log_error(RuntimeError(error_msg))
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            if exit_price <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowa cena zamkniƒôcia: {exit_price}"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                        await self.logger.log_error(RuntimeError(error_msg))
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            async with self._lock_context():
                # Sprawd≈∫ czy pozycja jest otwarta
                if position.status != PositionStatus.OPEN:
                    error_msg = f"Pozycja {position.id} nie jest otwarta"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return None

                # Sprawd≈∫ czy pozycja istnieje w otwartych pozycjach
                if position not in self.open_positions:
                    error_msg = f"Pozycja {position.id} nie istnieje w otwartych pozycjach"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return None

                # Obs≈Çuga czƒô≈õciowego zamkniƒôcia
                if volume is not None:
                    if volume <= Decimal('0'):
                        error_msg = f"Nieprawid≈Çowy wolumen: {volume}"
                        try:
                            if self.logger:
                                await self.logger.error(f"‚ùå {error_msg}")
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania
                        raise RuntimeError(error_msg)

                    if volume > position.volume:
                        error_msg = f"Wolumen do zamkniƒôcia ({volume}) jest wiƒôkszy ni≈º wolumen pozycji ({position.volume})"
                        try:
                            if self.logger:
                                await self.logger.error(f"‚ùå {error_msg}")
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania
                        raise RuntimeError(error_msg)

                    # Utw√≥rz nowƒÖ pozycjƒô dla zamykanej czƒô≈õci
                    closed_position = Position(
                        id=f"{position.id}_partial_{int(time.time() * 1000)}",
                        timestamp=datetime.now(),
                        symbol=position.symbol,
                        trade_type=position.trade_type,
                        volume=volume,
                        entry_price=position.entry_price,
                        stop_loss=position.stop_loss,
                        take_profit=position.take_profit,
                        status=PositionStatus.CLOSED,
                        exit_price=exit_price,
                        profit=self.calculate_position_profit(position, exit_price),
                        pips=self.calculate_position_pips(position, exit_price)
                    )

                    # Zmniejsz wolumen oryginalnej pozycji
                    position.volume -= volume

                    try:
                        if self.logger:
                            await self.logger.info(f"üìä Czƒô≈õciowo zamkniƒôto pozycjƒô {position.id}, wolumen: {volume}")
                            await self.logger.log_trade(closed_position, "CLOSE_PARTIAL")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania

                self.closed_positions.append(closed_position)
                return closed_position

            # Zamknij ca≈ÇƒÖ pozycjƒô
            position.status = PositionStatus.CLOSED
            position.exit_price = exit_price
            position.profit = self.calculate_position_profit(position, exit_price)
            position.pips = self.calculate_position_pips(position, exit_price)

            # Usu≈Ñ z otwartych i dodaj do zamkniƒôtych
            self.open_positions.remove(position)
            self.closed_positions.append(position)

            try:
                if self.logger:
                    await self.logger.info(f"üìä Zamkniƒôto pozycjƒô {position.id}, profit: {position.profit} pips")
                    await self.logger.log_trade(position, "CLOSE")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania

            return position

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas zamykania pozycji: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg) from e

    def validate_position_size(self, volume: Decimal) -> bool:
        """
        Sprawdza czy wolumen pozycji nie przekracza maksymalnego rozmiaru.

        Args:
            volume: Wolumen do sprawdzenia

        Returns:
            bool: True je≈õli wolumen jest prawid≈Çowy, False w przeciwnym razie
        """
        try:
            if volume <= Decimal('0'):
                error_msg = "Nieprawid≈Çowy wolumen: wolumen musi byƒá wiƒôkszy od 0"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return False
            
            total_volume = Decimal('0')
            for position in self.open_positions:
                if position.status == PositionStatus.OPEN:
                    total_volume += position.volume

            total_volume += volume
            if total_volume > self.max_position_size:
                error_msg = f"Przekroczono maksymalny rozmiar pozycji: {total_volume} > {self.max_position_size}"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return False

            return True

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas walidacji wolumenu: {str(e)}"
            try:
                if self.logger:
                    self.logger.error_sync(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            return False

    def check_stop_loss(self, position: Position, current_price: Decimal) -> bool:
        """
        Sprawdza czy pozycja powinna zostaƒá zamkniƒôta przez stop loss.

        Args:
            position: Pozycja do sprawdzenia
            current_price: Aktualna cena rynkowa

        Returns:
            bool: True je≈õli pozycja powinna zostaƒá zamkniƒôta
            
        Raises:
            ValueError: Gdy pozycja lub cena sƒÖ nieprawid≈Çowe
            RuntimeError: Gdy wystƒÖpi b≈ÇƒÖd podczas sprawdzania
        """
        try:
            if position is None:
                error_msg = "Nie podano pozycji do sprawdzenia"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
            raise ValueError(error_msg)
            
            if position.stop_loss is None:
                error_msg = f"Pozycja {position.id} nie ma ustawionego stop loss"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            if current_price <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowa cena: {current_price}"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            # Sprawd≈∫ warunki stop loss
            if position.trade_type == TradeType.BUY:
                should_close = current_price <= position.stop_loss
            else:  # SELL
                should_close = current_price >= position.stop_loss

            if should_close:
                try:
                    if self.logger:
                        self.logger.info_sync(
                            f"üî¥ Stop Loss dla pozycji {position.id} na poziomie {position.stop_loss}, "
                            f"aktualna cena: {current_price}"
                        )
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania

            return should_close

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas sprawdzania stop loss: {str(e)}"
            try:
                if self.logger:
                    self.logger.error_sync(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg) from e

    def check_take_profit(self, position: Position, current_price: Decimal) -> bool:
        """
        Sprawdza czy pozycja powinna zostaƒá zamkniƒôta przez take profit.

        Args:
            position: Pozycja do sprawdzenia
            current_price: Aktualna cena rynkowa

        Returns:
            bool: True je≈õli pozycja powinna zostaƒá zamkniƒôta
            
        Raises:
            ValueError: Gdy pozycja lub cena sƒÖ nieprawid≈Çowe
            RuntimeError: Gdy wystƒÖpi b≈ÇƒÖd podczas sprawdzania
        """
        try:
            if position is None:
                error_msg = "Nie podano pozycji do sprawdzenia"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
            raise ValueError(error_msg)
            
            if position.take_profit is None:
                error_msg = f"Pozycja {position.id} nie ma ustawionego take profit"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            if current_price <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowa cena: {current_price}"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            # Sprawd≈∫ warunki take profit
            if position.trade_type == TradeType.BUY:
                should_close = current_price >= position.take_profit
            else:  # SELL
                should_close = current_price <= position.take_profit

            if should_close:
                try:
                    if self.logger:
                        self.logger.info_sync(
                            f"üü¢ Take Profit dla pozycji {position.id} na poziomie {position.take_profit}, "
                            f"aktualna cena: {current_price}"
                        )
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania

            return should_close

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas sprawdzania take profit: {str(e)}"
            try:
                if self.logger:
                    self.logger.error_sync(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg) from e

    async def process_price_update(self, current_price: Optional[Decimal]) -> List[Position]:
        """
        Przetwarza aktualizacjƒô ceny dla wszystkich otwartych pozycji.
        
        Args:
            current_price: Aktualna cena rynkowa

        Returns:
            Lista zamkniƒôtych pozycji

        Raises:
            ValueError: Gdy cena jest None lub nieprawid≈Çowa
            RuntimeError: Gdy wystƒÖpi b≈ÇƒÖd podczas przetwarzania
        """
        if current_price is None:
            error_msg = "Nieprawid≈Çowa cena: None"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise ValueError(error_msg)

        if current_price <= Decimal('0'):
            error_msg = f"Nieprawid≈Çowa cena: {current_price}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise ValueError(error_msg)

        closed_positions = []

        try:
            async with self._lock_context():
                for position in self.open_positions[:]:  # Kopia listy do iteracji
                    if position.status != PositionStatus.OPEN:
                        continue

                    # Sprawd≈∫ czy pozycja ma ustawione poziomy
                    if position.stop_loss is None or position.take_profit is None:
                        error_msg = f"Pozycja {position.id} ma nieustawione poziomy: SL={position.stop_loss}, TP={position.take_profit}"
                        try:
                            if self.logger:
                                await self.logger.error(f"‚ùå {error_msg}")
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania
                        raise RuntimeError(error_msg)

                    # Sprawd≈∫ warunki zamkniƒôcia
                    if self.check_stop_loss(position, current_price):
                        try:
                            if self.logger:
                                await self.logger.info(f"üõë Stop loss dla pozycji {position.id} na poziomie {position.stop_loss}")
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania
                        closed_position = await self.close_position(position, position.stop_loss)
                        if closed_position:
                            closed_positions.append(closed_position)
                        continue

                    if self.check_take_profit(position, current_price):
                        try:
                            if self.logger:
                                await self.logger.info(f"üéØ Take profit dla pozycji {position.id} na poziomie {position.take_profit}")
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania
                        closed_position = await self.close_position(position, position.take_profit)
                        if closed_position:
                            closed_positions.append(closed_position)
                        continue

                    # Aktualizuj trailing stop i breakeven
                    await self.update_trailing_stop(position, current_price)
                    await self.update_breakeven(position, current_price)

            return closed_positions

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas przetwarzania ceny: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg) from e

    async def process_price_updates(self, prices: List[Decimal]) -> List[Position]:
        """
        Przetwarza listƒô aktualizacji cen.
        
        Args:
            prices: Lista cen do przetworzenia
            
        Returns:
            Lista zamkniƒôtych pozycji
            
        Raises:
            ValueError: Gdy lista cen jest None lub zawiera nieprawid≈Çowe warto≈õci
            RuntimeError: Gdy wystƒÖpi b≈ÇƒÖd podczas przetwarzania
        """
        if prices is None:
            error_msg = "Otrzymano None zamiast listy cen"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise ValueError(error_msg)
            
        if not prices:
            try:
                if self.logger:
                    await self.logger.warning("‚ö†Ô∏è Otrzymano pustƒÖ listƒô cen")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            return []
            
        # Sprawd≈∫ czy wszystkie ceny sƒÖ prawid≈Çowe
        for price in prices:
            if price is None or price <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowa cena: {price}"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)
                
        closed_positions = []
        try:
            for price in prices:
                positions = await self.process_price_update(price)
                closed_positions.extend(positions)

            try:
                if self.logger and closed_positions:
                    await self.logger.info(f"üìä Zaktualizowano ceny, zamkniƒôto {len(closed_positions)} pozycji")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania

            return closed_positions

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas przetwarzania cen: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg) from e

    def calculate_position_profit(self, position: Position, exit_price: Decimal) -> Decimal:
        """
        Oblicza zysk/stratƒô dla pozycji w walucie kwotowanej.

        Args:
            position: Pozycja do obliczenia
            exit_price: Cena zamkniƒôcia

        Returns:
            Decimal: Zysk/strata w walucie kwotowanej

        Raises:
            ValueError: Gdy pozycja lub cena sƒÖ nieprawid≈Çowe
        """
        try:
            if position is None:
                error_msg = "Nie podano pozycji do obliczenia zysku"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            if position.entry_price is None:
                error_msg = "Pozycja nie ma ustawionej ceny wej≈õcia"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            if exit_price <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowa cena wyj≈õcia: {exit_price}"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            # Oblicz r√≥≈ºnicƒô cen w zale≈ºno≈õci od typu pozycji
            if position.trade_type == TradeType.BUY:
                price_diff = exit_price - position.entry_price
            else:  # SELL
                price_diff = position.entry_price - exit_price

            # Oblicz zysk/stratƒô w walucie kwotowanej
            contract_size = Decimal('100000')  # Standardowy rozmiar kontraktu dla Forex
            profit = (price_diff * contract_size * position.volume).quantize(Decimal('0.01'))

            try:
                if self.logger:
                    self.logger.debug_sync(f"üìä Obliczono profit {profit} dla pozycji {position.id}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania

            return profit

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas obliczania zysku: {str(e)}"
            try:
                if self.logger:
                    self.logger.error_sync(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg) from e

    def calculate_position_pips(self, position: Position, exit_price: Decimal) -> Decimal:
        """
        Oblicza zysk/stratƒô w pipsach dla pozycji.

        Args:
            position: Pozycja do obliczenia
            exit_price: Cena zamkniƒôcia

        Returns:
            Decimal: Zysk/strata w pipsach

        Raises:
            ValueError: Gdy pozycja lub cena sƒÖ nieprawid≈Çowe
        """
        try:
            if position is None:
                error_msg = "Nie podano pozycji do obliczenia pips√≥w"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            if position.entry_price is None:
                error_msg = "Pozycja nie ma ustawionej ceny wej≈õcia"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            if exit_price <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowa cena wyj≈õcia: {exit_price}"
                try:
                    if self.logger:
                        self.logger.error_sync(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            # Pobierz warto≈õƒá pipsa dla danego instrumentu
            pip_value = position.point_value * Decimal('10')  # 1 pip = 10 punkt√≥w

            if position.trade_type == TradeType.BUY:
                pips = ((exit_price - position.entry_price) / pip_value).quantize(Decimal('0.1'))
            else:  # SELL
                pips = ((position.entry_price - exit_price) / pip_value).quantize(Decimal('0.1'))

            try:
                if self.logger:
                    self.logger.debug_sync(f"üìä Obliczono {pips} pips√≥w dla pozycji {position.id}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania

            return pips

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas obliczania pips√≥w: {str(e)}"
            try:
                if self.logger:
                    self.logger.error_sync(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg) from e

    def get_position_summary(self, position: Position) -> Dict[str, Any]:
        """
        Generuje podsumowanie pozycji w formie s≈Çownika.

        Args:
            position: Pozycja do podsumowania

        Returns:
            S≈Çownik z danymi pozycji
        """
        summary = {
            'timestamp': position.timestamp,
            'symbol': position.symbol,
            'trade_type': position.trade_type.value,
            'entry_price': float(position.entry_price),
            'volume': float(position.volume),
            'stop_loss': float(position.stop_loss),
            'take_profit': float(position.take_profit),
            'status': position.status.value
        }
        
        if position.exit_price is not None:
            summary['exit_price'] = float(position.exit_price)
        if position.profit is not None:
            summary['profit'] = float(position.profit)
        if position.pips is not None:
            summary['pips'] = float(position.pips)
            
        return summary

    def calculate_risk_metrics(self, position: Position) -> Dict[str, Decimal]:
        """
        Oblicza metryki ryzyka dla pozycji.

        Args:
            position (Position): Pozycja do analizy

        Returns:
            Dict[str, Decimal]: S≈Çownik z metrykami ryzyka

        Raises:
            ValueError: Gdy pozycja jest nieprawid≈Çowa
            RuntimeError: Gdy wystƒÖpi b≈ÇƒÖd podczas obliczania metryk
        """
        try:
            # Sprawd≈∫ czy pozycja ma wszystkie wymagane pola
            if not all([position.entry_price, position.stop_loss, position.take_profit, position.volume]):
                error_msg = f"‚ùå Brak wymaganych p√≥l w pozycji {position.id}"
                raise ValueError(error_msg)

            # Sprawd≈∫ poprawno≈õƒá poziom√≥w SL/TP
            if position.trade_type == TradeType.BUY:
                if position.stop_loss > position.entry_price:  # Zmieniono z >= na >
                    error_msg = "Stop loss dla pozycji d≈Çugiej musi byƒá poni≈ºej ceny wej≈õcia"
                    raise ValueError(error_msg)
                if position.take_profit <= position.entry_price:
                    error_msg = "Take profit dla pozycji d≈Çugiej musi byƒá powy≈ºej ceny wej≈õcia"
                    raise ValueError(error_msg)
            else:  # SELL
                if position.stop_loss <= position.entry_price:
                    error_msg = "Stop loss dla pozycji kr√≥tkiej musi byƒá powy≈ºej ceny wej≈õcia"
                    raise ValueError(error_msg)
                if position.take_profit >= position.entry_price:
                    error_msg = "Take profit dla pozycji kr√≥tkiej musi byƒá poni≈ºej ceny wej≈õcia"
                    raise ValueError(error_msg)

            # Oblicz podstawowe warto≈õci
            pip_value = Decimal('0.0001')
            risk_pips = abs(position.entry_price - position.stop_loss) / pip_value
            reward_pips = abs(position.take_profit - position.entry_price) / pip_value

            # Oblicz warto≈õci w walucie
            risk_amount = risk_pips * pip_value * position.volume * Decimal('100000')
            reward_amount = reward_pips * pip_value * position.volume * Decimal('100000')

            # Oblicz metryki
            risk_reward_ratio = reward_pips / risk_pips if risk_pips > 0 else Decimal('0')
            risk_per_trade = risk_amount
            position_exposure = position.volume
            max_drawdown = risk_amount

            return {
                'risk_reward_ratio': risk_reward_ratio,
                'risk_per_trade': risk_per_trade,
                'position_exposure': position_exposure,
                'max_drawdown': max_drawdown,
                'risk_pips': risk_pips,
                'reward_pips': reward_pips,
                'risk_amount': risk_amount,
                'reward_amount': reward_amount
            }

        except Exception as e:
            error_msg = f"‚ùå B≈ÇƒÖd podczas obliczania metryk ryzyka: {str(e)}"
            raise RuntimeError(error_msg) from e

    async def modify_position_levels(
        self, 
        position_id: Union[str, Position],
        new_stop_loss: Optional[Decimal] = None,
        new_take_profit: Optional[Decimal] = None,
        allow_breakeven: bool = False
    ) -> bool:
        """
        Modyfikuje poziomy stop loss i take profit dla pozycji.

        Args:
            position_id: ID pozycji do modyfikacji
            new_stop_loss: Nowy poziom stop loss (None je≈õli bez zmian)
            new_take_profit: Nowy poziom take profit (None je≈õli bez zmian)
            allow_breakeven: Czy pozwoliƒá na ustawienie stop loss na poziomie ceny wej≈õcia

        Returns:
            bool: True je≈õli modyfikacja siƒô powiod≈Ça, False w przeciwnym razie

        Raises:
            ValueError: Gdy podano nieprawid≈Çowe poziomy
        """
        try:
            async with self._lock_context():
                position = await self._get_position(position_id)
                if not position:
                    error_msg = f"Nie znaleziono pozycji o ID: {position_id}"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    return False

            if position.status != PositionStatus.OPEN:
                error_msg = f"Pozycja {position_id} nie jest otwarta"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return False

            # Sprawd≈∫ czy podano jakie≈õ poziomy do modyfikacji
            if new_stop_loss is None and new_take_profit is None:
                error_msg = "Nie podano poziom√≥w do modyfikacji"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return False

            # Walidacja poziom√≥w
            if new_stop_loss is not None:
                if new_stop_loss <= Decimal('0'):
                    error_msg = f"Nieprawid≈Çowy poziom stop loss: {new_stop_loss}"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    raise ValueError(error_msg)

            if position.trade_type == TradeType.BUY:
                if not allow_breakeven and new_stop_loss >= position.entry_price:
                    error_msg = "Stop loss dla pozycji long musi byƒá poni≈ºej ceny wej≈õcia"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    raise ValueError(error_msg)
                elif allow_breakeven and new_stop_loss > position.entry_price:
                    error_msg = "Stop loss dla pozycji long nie mo≈ºe byƒá powy≈ºej ceny wej≈õcia przy break even"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    raise ValueError(error_msg)

            if position.trade_type == TradeType.SELL:
                if not allow_breakeven and new_stop_loss <= position.entry_price:
                    error_msg = "Stop loss dla pozycji short musi byƒá powy≈ºej ceny wej≈õcia"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    raise ValueError(error_msg)
                elif allow_breakeven and new_stop_loss < position.entry_price:
                    error_msg = "Stop loss dla pozycji short nie mo≈ºe byƒá poni≈ºej ceny wej≈õcia przy break even"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    raise ValueError(error_msg)

            if new_take_profit is not None:
                if new_take_profit <= Decimal('0'):
                    error_msg = f"Nieprawid≈Çowy poziom take profit: {new_take_profit}"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    raise ValueError(error_msg)

                if position.trade_type == TradeType.BUY and new_take_profit <= position.entry_price:
                    error_msg = "Take profit dla pozycji long musi byƒá powy≈ºej ceny wej≈õcia"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    raise ValueError(error_msg)

                if position.trade_type == TradeType.SELL and new_take_profit >= position.entry_price:
                    error_msg = "Take profit dla pozycji short musi byƒá poni≈ºej ceny wej≈õcia"
                    try:
                        if self.logger:
                            await self.logger.error(f"‚ùå {error_msg}")
                    except Exception:
                        pass  # Ignoruj b≈Çƒôdy logowania
                    raise ValueError(error_msg)

            # Aktualizacja poziom√≥w
            if new_stop_loss is not None:
                position.stop_loss = new_stop_loss
            if new_take_profit is not None:
                position.take_profit = new_take_profit

            try:
                if self.logger:
                    await self.logger.info(
                        f"‚úÖ Zmodyfikowano poziomy dla pozycji {position_id}: "
                        f"SL={position.stop_loss}, TP={position.take_profit}"
                    )
                    await self.logger.log_trade(position, "MODIFY")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
        
            return True

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas modyfikacji poziom√≥w: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg) from e

    async def update_trailing_stop(self, position: Position, current_price: Decimal) -> None:
        """
        Aktualizuje trailing stop dla pozycji.

        Args:
            position: Pozycja do aktualizacji
            current_price: Aktualna cena rynkowa

        Raises:
            ValueError: Gdy pozycja jest None lub cena jest nieprawid≈Çowa
            RuntimeError: Gdy pozycja ma nieustawiony stop loss lub wystƒÖpi inny b≈ÇƒÖd
        """
        try:
            if position is None:
                error_msg = "Nie podano pozycji do aktualizacji trailing stop"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            if current_price <= Decimal('0'):
                error_msg = f"Nieprawid≈Çowa cena: {current_price}"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise ValueError(error_msg)

            if position.status != PositionStatus.OPEN:
                try:
                    if self.logger:
                        await self.logger.debug(f"‚ö†Ô∏è Pominiƒôto aktualizacjƒô trailing stop dla zamkniƒôtej pozycji {position.id}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return

            if position.stop_loss is None:
                error_msg = f"Pozycja {position.id} ma nieustawiony stop loss"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            if position.entry_price is None:
                error_msg = f"Pozycja {position.id} ma nieustawionƒÖ cenƒô wej≈õcia"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                raise RuntimeError(error_msg)

            # Aktualizuj trailing stop tylko je≈õli cena posz≈Ça w dobrym kierunku
            if position.trade_type == TradeType.BUY:
                # Dla pozycji long, przesuwamy SL w g√≥rƒô gdy cena ro≈õnie
                if current_price > position.entry_price:
                    # Oblicz dystans miƒôdzy obecnym SL a cenƒÖ wej≈õcia
                    current_distance = position.entry_price - position.stop_loss
                    # Oblicz nowy potencjalny poziom SL
                    new_stop_loss = current_price - current_distance
                    # Aktualizuj tylko je≈õli nowy SL jest wy≈ºej ni≈º obecny
                    if new_stop_loss > position.stop_loss:
                        old_stop_loss = position.stop_loss
                        success = await self.modify_position_levels(position, new_stop_loss=new_stop_loss)
                        if success:
                            try:
                                if self.logger:
                                    await self.logger.info(
                                        f"üîÑ Zaktualizowano trailing stop dla pozycji {position.id} "
                                        f"z {old_stop_loss} na {new_stop_loss}"
                                    )
                            except Exception:
                                pass  # Ignoruj b≈Çƒôdy logowania

            else:  # SELL
                # Dla pozycji short, przesuwamy SL w d√≥≈Ç gdy cena spada
                if current_price < position.entry_price:
                    # Oblicz dystans miƒôdzy obecnym SL a cenƒÖ wej≈õcia
                    current_distance = position.stop_loss - position.entry_price
                    # Oblicz nowy potencjalny poziom SL
                    new_stop_loss = current_price + current_distance
                    # Aktualizuj tylko je≈õli nowy SL jest ni≈ºej ni≈º obecny
                    if new_stop_loss < position.stop_loss:
                        old_stop_loss = position.stop_loss
                        success = await self.modify_position_levels(position, new_stop_loss=new_stop_loss)
                        if success:
                            try:
                                if self.logger:
                                    await self.logger.info(
                                        f"üîÑ Zaktualizowano trailing stop dla pozycji {position.id} "
                                        f"z {old_stop_loss} na {new_stop_loss}"
                                    )
                            except Exception:
                                pass  # Ignoruj b≈Çƒôdy logowania

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas aktualizacji trailing stop: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg) from e

    async def update_breakeven(self, position_id: Union[str, Position], current_price: Decimal) -> bool:
        """
        Aktualizuje stop loss do poziomu break even dla pozycji, kt√≥ra osiƒÖgnƒô≈Ça wymagany zysk.

        Args:
            position_id: ID pozycji lub obiekt Position
            current_price: Aktualna cena rynkowa

        Returns:
            bool: True je≈õli poziom zosta≈Ç zaktualizowany, False w przeciwnym razie
        """
        try:
            position = await self._get_position(position_id)
            if not position:
                error_msg = "Nie znaleziono pozycji do aktualizacji break even"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return False

            if position.status != PositionStatus.OPEN:
                error_msg = "Pozycja jest ju≈º zamkniƒôta"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return False

            if position.stop_loss is None or position.entry_price is None:
                error_msg = "Pozycja nie ma ustawionego stop loss lub ceny wej≈õcia"
                try:
                    if self.logger:
                        await self.logger.error(f"‚ùå {error_msg}")
                except Exception:
                    pass  # Ignoruj b≈Çƒôdy logowania
                return False

            # Oblicz minimalny ruch ceny wymagany do break even
            min_move = self.breakeven_pips * position.point_value

            if position.trade_type == TradeType.BUY:
                required_price = position.entry_price + min_move
                if current_price >= required_price:
                    success = await self.modify_position_levels(position, new_stop_loss=position.entry_price)
                    if success:
                        try:
                            if self.logger:
                                await self.logger.info(f"‚úÖ Zaktualizowano SL do break even dla pozycji {position.id}")
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania
                    return success
            else:  # SELL
                required_price = position.entry_price - min_move
                if current_price <= required_price:
                    success = await self.modify_position_levels(position, new_stop_loss=position.entry_price)
                    if success:
                        try:
                            if self.logger:
                                await self.logger.info(f"‚úÖ Zaktualizowano SL do break even dla pozycji {position.id}")
                        except Exception:
                            pass  # Ignoruj b≈Çƒôdy logowania
                    return success

            return False

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas aktualizacji break even: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            raise RuntimeError(error_msg) from e

    async def _get_position(self, position_id: Union[str, Position]) -> Optional[Position]:
        """
        Pobiera pozycjƒô na podstawie ID lub obiektu pozycji.

        Args:
            position_id: ID pozycji lub obiekt pozycji

        Returns:
            Position lub None je≈õli nie znaleziono
        """
        try:
            if isinstance(position_id, Position):
                return position_id

            for position in self.open_positions:
                if position.id == position_id:
                    return position

            return None

        except Exception as e:
            error_msg = f"B≈ÇƒÖd podczas pobierania pozycji: {str(e)}"
            try:
                if self.logger:
                    await self.logger.error(f"‚ùå {error_msg}")
            except Exception:
                pass  # Ignoruj b≈Çƒôdy logowania
            return None