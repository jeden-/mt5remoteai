"""
Modu≈Ç do zarzƒÖdzania cache'm danych.
"""

import logging
import json
from datetime import datetime, timedelta
from typing import Any, Optional, Dict, List
from sqlalchemy.orm import Session
from sqlalchemy import select, and_, or_

from baza_danych.modele import Cache

logger = logging.getLogger(__name__)

class MenedzerCache:
    """Klasa do zarzƒÖdzania cache'm danych."""
    
    def __init__(self, session: Session):
        """
        Inicjalizacja mened≈ºera cache.
        
        Args:
            session: Sesja SQLAlchemy
        """
        self.session = session
        self.logger = logger
        
    async def dodaj(
        self,
        klucz: str,
        wartosc: Any,
        czas_wygasniecia: Optional[timedelta] = None
    ) -> bool:
        """
        Dodaje warto≈õƒá do cache'u.
        
        Args:
            klucz: Klucz cache'u
            wartosc: Warto≈õƒá do zapisania
            czas_wygasniecia: Opcjonalny czas wyga≈õniƒôcia
            
        Returns:
            bool: True je≈õli dodano pomy≈õlnie
        """
        try:
            # Usuniƒôcie starego wpisu je≈õli istnieje
            await self.usun(klucz)
            
            # Serializacja warto≈õci do JSON
            wartosc_json = json.dumps(wartosc)
            
            # Obliczenie czasu wyga≈õniƒôcia
            wygasa = None
            if czas_wygasniecia:
                wygasa = datetime.utcnow() + czas_wygasniecia
            
            # Utworzenie nowego wpisu
            cache = Cache(
                klucz=klucz,
                wartosc=wartosc_json,
                timestamp=datetime.utcnow(),
                wygasa=wygasa
            )
            
            self.session.add(cache)
            self.session.commit()
            
            self.logger.info(f"ü•∑ Dodano do cache: {klucz}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd dodawania do cache: {str(e)}")
            return False
            
    async def pobierz(self, klucz: str) -> Optional[Any]:
        """
        Pobiera warto≈õƒá z cache'u.
        
        Args:
            klucz: Klucz cache'u
            
        Returns:
            Any: Warto≈õƒá z cache'u lub None je≈õli nie znaleziono/wygas≈Ça
        """
        try:
            # Pobranie wpisu z bazy
            cache = self.session.execute(
                select(Cache)
                .where(
                    and_(
                        Cache.klucz == klucz,
                        or_(
                            Cache.wygasa.is_(None),
                            Cache.wygasa > datetime.utcnow()
                        )
                    )
                )
            ).scalar_one_or_none()
            
            if cache is None:
                return None
                
            # Deserializacja warto≈õci z JSON
            wartosc = json.loads(cache.wartosc)
            
            self.logger.info(f"ü•∑ Pobrano z cache: {klucz}")
            return wartosc
            
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd pobierania z cache: {str(e)}")
            return None
            
    async def usun(self, klucz: str) -> bool:
        """
        Usuwa warto≈õƒá z cache'u.
        
        Args:
            klucz: Klucz cache'u
            
        Returns:
            bool: True je≈õli usuniƒôto pomy≈õlnie
        """
        try:
            self.session.execute(
                Cache.__table__.delete().where(Cache.klucz == klucz)
            )
            self.session.commit()
            
            self.logger.info(f"ü•∑ Usuniƒôto z cache: {klucz}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd usuwania z cache: {str(e)}")
            return False
            
    async def wyczysc_wygasle(self) -> int:
        """
        Usuwa wygas≈Çe wpisy z cache'u.
        
        Returns:
            int: Liczba usuniƒôtych wpis√≥w
        """
        try:
            teraz = datetime.utcnow()
            wynik = self.session.execute(
                Cache.__table__.delete().where(
                    and_(
                        Cache.wygasa.isnot(None),
                        Cache.wygasa <= teraz
                    )
                )
            )
            self.session.commit()
            
            liczba = wynik.rowcount
            if liczba > 0:
                self.logger.info(f"ü•∑ Usuniƒôto {liczba} wygas≈Çych wpis√≥w z cache")
            return liczba
            
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd czyszczenia cache: {str(e)}")
            return 0
            
    async def pobierz_wiele(self, klucze: List[str]) -> Dict[str, Any]:
        """
        Pobiera wiele warto≈õci z cache'u.
        
        Args:
            klucze: Lista kluczy do pobrania
            
        Returns:
            Dict[str, Any]: S≈Çownik z pobranymi warto≈õciami
        """
        try:
            # Pobranie wpis√≥w z bazy
            cache_wpisy = self.session.execute(
                select(Cache)
                .where(
                    and_(
                        Cache.klucz.in_(klucze),
                        or_(
                            Cache.wygasa.is_(None),
                            Cache.wygasa > datetime.utcnow()
                        )
                    )
                )
            ).scalars().all()
            
            # Deserializacja warto≈õci
            wynik = {}
            for wpis in cache_wpisy:
                try:
                    wynik[wpis.klucz] = json.loads(wpis.wartosc)
                except Exception as e:
                    self.logger.error(f"‚ùå B≈ÇƒÖd deserializacji {wpis.klucz}: {str(e)}")
                    
            self.logger.info(f"ü•∑ Pobrano {len(wynik)} wpis√≥w z cache")
            return wynik
            
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd pobierania wielu z cache: {str(e)}")
            return {} 